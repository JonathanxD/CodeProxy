plugins {
    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

group 'com.github.jonathanxd'
version '2.3.2-SNAPSHOT'

// Setup

ext {
    description = "Proxy Pattern written on top of CodeAPI!"
}


allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'license'
    apply plugin: 'com.github.johnrengelman.shadow'

    license {
        header rootProject.file("LICENSE_HEADER")
    }

}

defaultTasks 'licenseFormat', 'build', 'test', 'jar', 'shadowJar'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

allprojects{
    dependencies {
        compile 'com.github.JonathanxD:CodeAPI:4.0.0.17-beta'
        compile 'com.github.JonathanxD.CodeAPI-BytecodeWriter:CodeAPI-BytecodeWriter:4.0.0.22-beta-bytecode'
        compile 'com.github.JonathanxD:JwIUtils:4.10.0'

        testCompile group: 'junit', name:'junit', version: '4.12'
    }

    test {
        useJUnit()
    }
}

// Tasks
allprojects {
    jar {
        from "$rootProject.rootDir/LICENSE"

        manifest {
            attributes 'Implementation-Title': baseName,
                    'Implementation-Version': version
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

allprojects{
    license {
        String name = project.getName()
        String description = project.ext.description

        ext.name = "$name"
        ext.organization = 'TheRealBuggy/JonathanxD (https://github.com/JonathanxD/ & https://github.com/TheRealBuggy/)'
        ext.description = "$description"
        ext.url = 'https://github.com/JonathanxD/CodeProxy'
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.email = 'jonathan.scripter@programmer.net'

        exclude "**/*.info"
        exclude "**/*.md"
        exclude "res/**"
        exclude "src/main/resources/**"
        exclude "src/test/resources/**"

        header rootProject.file('LICENSE_HEADER')

        sourceSets = project.sourceSets

        ignoreFailures false
        strictCheck true

        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
}
