/*
 *      CodeProxy - Proxy Pattern written on top of CodeAPI! <https://github.com/JonathanxD/CodeProxy>
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2018 TheRealBuggy/JonathanxD (https://github.com/JonathanxD/ & https://github.com/TheRealBuggy/) <jonathan.scripter@programmer.net>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.codeproxy.gen;

import com.github.jonathanxd.codeapi.MutableCodeSource;
import com.github.jonathanxd.codeapi.base.FieldAccess;
import com.github.jonathanxd.codeapi.base.FieldDeclaration;
import com.github.jonathanxd.codeapi.base.MethodDeclaration;
import com.github.jonathanxd.codeapi.base.VariableDeclaration;
import com.github.jonathanxd.codeproxy.ProxyData;
import com.github.jonathanxd.codeproxy.info.MethodInfo;

import org.jetbrains.annotations.Nullable;

import java.lang.reflect.Method;

/**
 * Simple class that holds generation information.
 */
public abstract class GenEnv {

    /**
     * Holds the count of how many custom handler generators was called.
     */
    private final int count;

    /**
     * ProxyData of current proxy.
     */
    private final ProxyData proxyData;

    /**
     * Method being processed.
     */
    private final Method method;

    /**
     * Generated method declaration.
     */
    private final MethodDeclaration methodDeclaration;

    /**
     * Access to {@link java.lang.invoke.MethodHandles.Lookup static lookup} of proxy class
     * context.
     */
    private final FieldAccess lookupAccess;

    /**
     * Access to proxy instance {@link ProxyData}.
     */
    private final FieldAccess proxyDataAccess;

    /**
     * Access to proxy {@link com.github.jonathanxd.codeproxy.handler.InvocationHandler}.
     */
    private final FieldAccess invocationHandlerAccess;

    /**
     * Access to static constant {@link MethodInfo} of current method.
     */
    private final FieldAccess methodInfoAccess;

    /**
     * Specification of cache field of {@link #method} specification.
     */
    private final FieldDeclaration cacheField;

    /**
     * True to append {@link com.github.jonathanxd.codeproxy.handler.InvocationHandler#invoke(Object,
     * MethodInfo, Object[], ProxyData)} after the {@link com.github.jonathanxd.codeapi.CodeSource
     * source} generated by {@link CustomHandlerGenerator}.
     *
     * When set to {@code true}, {@link CustomGen Custom Generators} will be called by the proxy
     * generator to generate custom sources, when set to {@code false}, {@link CustomGen Custom
     * Generators} will not be called by the proxy generator, if you desire to call custom
     * generators, call it manually through {@link #callCustomGenerators(VariableDeclaration,
     * MutableCodeSource)}.
     *
     * Invocation handler will only be generated if all called {@link CustomHandlerGenerator Custom
     * Handler Generators} sets it to true.
     */
    private boolean invokeHandler = true;

    /**
     * {@code true} to proceed to next {@link CustomHandlerGenerator}. {@code false} to ignore
     * others {@link CustomHandlerGenerator}.
     *
     * If the {@link CustomHandlerGenerator} generates the entire body of handler method and the
     * generated source may not work with others {@link CustomHandlerGenerator Custom Handler
     * Generators}, this should be set to false (otherwise the class loading may fail gracefully
     * because at the moment CodeProxy does not validate structures).
     */
    private boolean mayProceed = false;

    protected GenEnv(int count,
                     ProxyData proxyData, Method method,
                     MethodDeclaration methodDeclaration,
                     FieldAccess lookupAccess,
                     FieldAccess proxyDataAccess,
                     FieldAccess invocationHandlerAccess,
                     FieldAccess methodInfoAccess, FieldDeclaration cacheField) {
        this.count = count;
        this.proxyData = proxyData;
        this.method = method;
        this.methodDeclaration = methodDeclaration;
        this.lookupAccess = lookupAccess;
        this.proxyDataAccess = proxyDataAccess;
        this.invocationHandlerAccess = invocationHandlerAccess;
        this.methodInfoAccess = methodInfoAccess;
        this.cacheField = cacheField;
    }

    /**
     * Call {@link CustomGen} and append the {@link com.github.jonathanxd.codeapi.CodeSource source}
     * generated by them to {@code source}.
     *
     * @param returnVariable Variable that contains return value. {@code null} if method return type
     *                       is void.
     * @param source         Target source to append {@link com.github.jonathanxd.codeapi.CodeSource
     *                       source} generated by {@link CustomGen CustomGenerators}.
     */
    public abstract void callCustomGenerators(@Nullable VariableDeclaration returnVariable, MutableCodeSource source);

    /**
     * Returns whether the {@code generator} should append {@link com.github.jonathanxd.codeproxy.handler.InvocationHandler#invoke(Object,
     * MethodInfo, Object[], ProxyData)} after source generated by {@link CustomHandlerGenerator}.
     *
     * @see #invokeHandler
     */
    public boolean isInvokeHandler() {
        return this.invokeHandler;
    }

    /**
     * Sets whether the {@code generator} should append {@link com.github.jonathanxd.codeproxy.handler.InvocationHandler#invoke(Object,
     * MethodInfo, Object[], ProxyData)} after source generated by {@link CustomHandlerGenerator}.
     *
     * @see #invokeHandler
     */
    public void setInvokeHandler(boolean invokeHandler) {
        this.invokeHandler = invokeHandler;
    }


    /**
     * Returns whether the invocation of {@link CustomHandlerGenerator Custom Handler Generators}
     * {@link #mayProceed} or not.
     */
    public boolean isMayProceed() {
        return this.mayProceed;
    }

    /**
     * Sets whether the invocation of {@link CustomHandlerGenerator Custom Handler Generators}
     * {@link #mayProceed} or not.
     */
    public void setMayProceed(boolean mayProceed) {
        this.mayProceed = mayProceed;
    }

    /**
     * Gets the {@link #count} of how many custom handlers was called.
     */
    public int getCount() {
        return this.count;
    }

    /**
     * Gets the {@link #proxyData}.
     */
    public ProxyData getProxyData() {
        return this.proxyData;
    }

    /**
     * Gets the {@link #method}.
     */
    public Method getMethod() {
        return this.method;
    }

    /**
     * Gets the {@link #methodDeclaration}.
     */
    public MethodDeclaration getMethodDeclaration() {
        return this.methodDeclaration;
    }

    /**
     * Gets the {@link #lookupAccess}.
     */
    public FieldAccess getLookupAccess() {
        return this.lookupAccess;
    }

    /**
     * Gets the {@link #proxyDataAccess}.
     */
    public FieldAccess getProxyDataAccess() {
        return this.proxyDataAccess;
    }

    /**
     * Gets the {@link #invocationHandlerAccess}.
     */
    public FieldAccess getInvocationHandlerAccess() {
        return this.invocationHandlerAccess;
    }

    /**
     * Gets the {@link #methodInfoAccess}.
     */
    public FieldAccess getMethodInfoAccess() {
        return this.methodInfoAccess;
    }

    /**
     * Gets the {@link #cacheField}.
     */
    public FieldDeclaration getCacheField() {
        return this.cacheField;
    }
}
