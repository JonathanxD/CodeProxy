/*
 *      CodeProxy - Proxy Pattern written on top of CodeAPI! <https://github.com/JonathanxD/CodeProxy>
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2017 TheRealBuggy/JonathanxD (https://github.com/JonathanxD/ & https://github.com/TheRealBuggy/) <jonathan.scripter@programmer.net>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.codeproxy;

import com.github.jonathanxd.codeproxy.gen.Custom;
import com.github.jonathanxd.codeproxy.gen.CustomGen;
import com.github.jonathanxd.codeproxy.gen.CustomHandlerGenerator;
import com.github.jonathanxd.codeproxy.handler.InvocationHandler;
import com.github.jonathanxd.codeproxy.internals.Util;
import com.github.jonathanxd.iutils.string.ToStringHelper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Hold information about proxy class. This class is used to generate proxy classes and is stored in
 * the generated class.
 *
 * Note: If you modify the constructor of this class, you should update the invocation generated by
 * {@link com.github.jonathanxd.codeproxy.internals.Util#constructProxyData(ProxyData, Type, String, Type, String)}.
 */
public class ProxyData {

    /**
     * Class loader used to load proxy class (this is not required since you can simple call {@link
     * Class#getClassLoader()}, but this field is not removed because we use this information in
     * generation and reuse the instance in proxy creation.)
     */
    private final ClassLoader classLoader;

    /**
     * Interfaces which proxy implements.
     */
    private final Class<?>[] interfaces;

    /**
     * Super class of proxy class. The features is very limited, if proxy system has access to
     * package where super class is defined, then the proxy is defined in this package and have
     * access to package-private methods, if not, it has only access to protected and public
     * methods. CodeProxies can't override private methods.
     */
    private final Class<?> superClass;

    /**
     * Handler of invocations.
     */
    private final InvocationHandler handler;

    /**
     * Custom handlers view.
     *
     * Provided in Class form to keep consistency and constant semantic.
     */
    private final List<Class<? extends CustomHandlerGenerator>> customHandlerGeneratorsView;

    /**
     * Custom generators view.
     *
     * Provided in Class form to keep consistency and constant semantic.
     */
    private final List<Class<? extends CustomGen>> customGeneratorsView;

    /**
     * Custom.
     */
    private final List<Custom> customView;

    public ProxyData(ClassLoader classLoader, Class<?>[] interfaces, Class<?> superClass,
                     InvocationHandler handler,
                     List<Class<? extends CustomHandlerGenerator>> customHandlerGenerators,
                     List<Class<? extends CustomGen>> customGenerators,
                     List<Custom> customList) {
        this.classLoader = classLoader;
        this.interfaces = interfaces;
        this.superClass = superClass;
        this.handler = handler;
        this.customHandlerGeneratorsView = Collections.unmodifiableList(customHandlerGenerators);
        this.customGeneratorsView = Collections.unmodifiableList(customGenerators);
        this.customView = Collections.unmodifiableList(customList);
    }

    /**
     * Gets the class loader of proxy class.
     */
    public ClassLoader getClassLoader() {
        return this.classLoader;
    }

    /**
     * Gets the interfaces of proxy class.
     */
    public Class<?>[] getInterfaces() {
        return this.interfaces.clone();
    }

    /**
     * Gets the super class of proxy class.
     */
    public Class<?> getSuperClass() {
        return this.superClass;
    }

    /**
     * Gets the handler of proxy class.
     */
    public InvocationHandler getHandler() {
        return this.handler;
    }

    /**
     * Gets the view with custom handlers generators.
     */
    public List<Class<? extends CustomHandlerGenerator>> getCustomHandlerGeneratorsView() {
        return this.customHandlerGeneratorsView;
    }

    /**
     * Gets the custom handlers generators.
     */
    public List<CustomHandlerGenerator> getCustomHandlerGeneratorsInstances() {
        List<CustomHandlerGenerator> collect = this.getCustomHandlerGeneratorsView().stream()
                .map(Util::getInstance)
                .collect(Collectors.toList());
        this.customView.stream()
                .map(Custom::getCustomHandlerGenerators)
                .forEach(collect::addAll);
        return collect;
    }

    /**
     * Gets the view with custom generators.
     */
    public List<Class<? extends CustomGen>> getCustomGeneratorsView() {
        return this.customGeneratorsView;
    }

    /**
     * Gets the custom handlers generators.
     */
    public List<CustomGen> getCustomGeneratorsInstances() {
        List<CustomGen> collect = this.getCustomGeneratorsView().stream()
                .map(Util::getInstance)
                .collect(Collectors.toList());
        this.customView.stream()
                .map(Custom::getCustomGenerators)
                .forEach(collect::addAll);
        return collect;
    }

    /**
     * Gets the view with {@link Custom}.
     */
    public List<Custom> getCustomView() {
        return this.customView;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj instanceof ProxyData) {
            ProxyData proxyData = (ProxyData) obj;
            return this.getClassLoader().equals(proxyData.getClassLoader())
                    //&& this.getHandler().equals(proxyData.getHandler())
                    && Arrays.equals(this.getInterfaces(), proxyData.getInterfaces())
                    && this.getSuperClass().equals(proxyData.getSuperClass())
                    && this.getCustomHandlerGeneratorsView().equals(proxyData.getCustomHandlerGeneratorsView())
                    && this.getCustomGeneratorsView().equals(proxyData.getCustomGeneratorsView())
                    && this.getCustomView().equals(proxyData.getCustomView());

        }

        return super.equals(obj);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.getClassLoader(), this.getSuperClass(), Arrays.hashCode(this.getInterfaces()),
                this.getCustomHandlerGeneratorsView().hashCode(), this.getCustomGeneratorsView().hashCode(),
                this.getCustomView().hashCode());
    }

    @Override
    public String toString() {
        return ToStringHelper.defaultHelper(this.getClass().getSimpleName())
                .add("classLoader", this.getClassLoader().toString())
                .add("superClass", this.getSuperClass().toString())
                .add("interfaces", Arrays.toString(this.getInterfaces()))
                .add("invocationHandler", this.getHandler().toString())
                .add("customHandlerGenerators", this.getCustomHandlerGeneratorsView().toString())
                .add("customGenerators", this.getCustomGeneratorsView().toString())
                .add("customs", this.getCustomView().toString())
                .toString();
    }

    /**
     * Gets builder with defaults.
     */
    public Builder builder() {
        return new Builder(this);
    }

    /**
     * Builder of proxy data instance.
     */
    public static class Builder implements com.github.jonathanxd.codeapi.builder.Builder<ProxyData, Builder> {

        private ClassLoader classLoader;
        private List<Class<?>> interfaces = new ArrayList<>();
        private Class<?> superClass = Object.class;
        private InvocationHandler invocationHandler;
        private List<Class<? extends CustomHandlerGenerator>> customHandlerGenerators = new ArrayList<>();
        private List<Class<? extends CustomGen>> customGens = new ArrayList<>();
        private List<Custom> customs = new ArrayList<>();

        Builder() {
        }

        Builder(ProxyData defaults) {
            this.interfaces = new ArrayList<>();
            this.customHandlerGenerators = new ArrayList<>();
            this.customGens = new ArrayList<>();

            this.classLoader = defaults.getClassLoader();
            Collections.addAll(this.interfaces, defaults.getInterfaces());
            this.superClass = defaults.getSuperClass();
            this.invocationHandler = defaults.getHandler();
            this.customHandlerGenerators = new ArrayList<>(defaults.getCustomHandlerGeneratorsView());
            this.customGens = new ArrayList<>(defaults.getCustomGeneratorsView());
            this.customs = new ArrayList<>(defaults.getCustomView());
        }

        /**
         * Creates builder instance.
         */
        public static Builder builder() {
            return new Builder();
        }

        /**
         * Creates builder instance from defaults.
         */
        public static Builder builder(ProxyData defaults) {
            return new Builder(defaults);
        }

        /**
         * Sets {@link ProxyData#classLoader}
         */
        public Builder classLoader(ClassLoader classLoader) {
            this.classLoader = classLoader;
            return this;
        }

        /**
         * Sets {@link ProxyData#interfaces} to a list with all elements of {@code interfaces}.
         */
        public Builder interfaces(List<Class<?>> interfaces) {
            this.interfaces = new ArrayList<>(interfaces);
            return this;
        }

        /**
         * Adds a interface to {@link ProxyData#interfaces}.
         */
        public Builder addInterface(Class<?> interface_) {
            this.interfaces.add(interface_);
            return this;
        }

        /**
         * Sets {@link ProxyData#superClass}
         */
        public Builder superClass(Class<?> superClass) {
            this.superClass = superClass;
            return this;
        }

        /**
         * Sets {@link ProxyData#customHandlerGeneratorsView} to a list with all elements of {@code
         * customHandlerGenerators}.
         */
        public Builder customHandlerGenerators(List<Class<? extends CustomHandlerGenerator>> customHandlerGenerators) {
            this.customHandlerGenerators = new ArrayList<>(customHandlerGenerators);
            return this;
        }

        /**
         * Adds a handler to {@link ProxyData#customHandlerGeneratorsView}.
         */
        public Builder addCustomHandlerGenerator(Class<? extends CustomHandlerGenerator> customHandler) {
            this.customHandlerGenerators.add(customHandler);
            return this;
        }

        /**
         * Sets {@link ProxyData#customGeneratorsView} to a list with all elements of {@code
         * customGenerators}.
         */
        public Builder customGenerators(List<Class<? extends CustomGen>> customGenerators) {
            this.customGens = new ArrayList<>(customGenerators);
            return this;
        }

        /**
         * Adds a generator to {@link ProxyData#customGeneratorsView}.
         */
        public Builder addCustomGenerator(Class<? extends CustomGen> customGen) {
            this.customGens.add(customGen);
            return this;
        }

        /**
         * Sets {@link ProxyData#customView} to a list with all elements of {@code customList}.
         */
        public Builder custom(List<Custom> customList) {
            this.customs = new ArrayList<>(customList);
            return this;
        }

        /**
         * Adds a custom to {@link ProxyData#customView}.
         */
        public Builder addCustom(Custom custom) {
            this.customs.add(custom);
            return this;
        }

        /**
         * Sets {@link ProxyData#handler}
         */
        public Builder invocationHandler(InvocationHandler invocationHandler) {
            this.invocationHandler = invocationHandler;
            return this;
        }

        /**
         * Gets {@link ProxyData#classLoader}
         */
        public ClassLoader getClassLoader() {
            return this.classLoader;
        }

        /**
         * Gets {@link ProxyData#interfaces}
         */
        public List<Class<?>> getInterfaces() {
            return this.interfaces;
        }

        /**
         * Gets {@link ProxyData#superClass}
         */
        public Class<?> getSuperClass() {
            return this.superClass;
        }

        /**
         * Gets {@link ProxyData#handler}
         */
        public InvocationHandler getInvocationHandler() {
            return this.invocationHandler;
        }

        /**
         * Gets {@link ProxyData#customHandlerGeneratorsView}
         */
        public List<Class<? extends CustomHandlerGenerator>> getCustomHandlerGenerators() {
            return this.customHandlerGenerators;
        }

        /**
         * Gets {@link ProxyData#customGeneratorsView}
         */
        public List<Class<? extends CustomGen>> getCustomGens() {
            return this.customGens;
        }

        @Override
        public ProxyData build() {
            Objects.requireNonNull(this.classLoader);
            Objects.requireNonNull(this.invocationHandler);

            return new ProxyData(this.classLoader,
                    this.interfaces.toArray(new Class[interfaces.size()]),
                    this.superClass,
                    this.invocationHandler,
                    new ArrayList<>(this.customHandlerGenerators),
                    new ArrayList<>(this.customGens),
                    new ArrayList<>(this.customs));
        }

    }
}
